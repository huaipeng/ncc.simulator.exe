// ------------------------------------------------------------------
// NeuroSim (c) 2018 Institute of High Performance Computing (IHPC)
// Agency for Science, Technology and Research (A*STAR)
// ------------------------------------------------------------------

syntax = "proto2";

package neurosim; 

import "chip_config.proto";

message BitstreamCoreConfig {
	
	// Specify core id of current bitstream
	required int32 core_id = 1;

	// Number of rows or input axons supported by core
	// This should match the setting from ChipConfig
    	required int32 num_axons = 2;

	// Number of neurons in core
	// This should match the setting from ChipConfig
    	required int32 num_neurons = 3;    
    
    	// Layer Index for this core
    	optional int32 layer_index = 8 [default = -1];

	// For storing data for digital crossbar
	message DigitalCrosspointConfig {
		// Number of values should be num_axons x num_neurons
		// Values stored in each crosspoint
		repeated int32 values = 1;
	}
	
	// For storing weights for float-type crossbar
	message FloatTypeCrosspointConfig {
		// Size of values should be equal to the num_axons x num_nueons
		// Values stored in each crosspoint
		repeated float values = 1;
	}
    

	// For storing data for RRAM crossbar
	message RRAMCrosspointConfig {
		// Number of pairs should be num_axons x num_neurons
		// "Positive" and "negative" resistances stored in each crosspoint
		repeated float pos_resistances = 1;
		repeated float neg_resistances = 2;
	}

	// Depends on crossbar type in chip config
    	oneof crosspoint_data {
		DigitalCrosspointConfig digital_crosspoint_data = 5;
		RRAMCrosspointConfig rram_crosspoint_data = 6;
		FloatTypeCrosspointConfig floattype_crosspoint_data = 17;
	}

    	message ConnectionConfig {
		// The next core id this neuron is connected to
		// Sanity check: ensure that the destintaion core id
		// has a corresponding BitstreamCoreConfig.
		required int32 dest_core_id = 1;
		
    		// The row id of the next core this neuron is connected to
		required int32 dest_axon_id = 2;
	}
	
	message NeuronConfig {
		repeated ConnectionConfig connections = 1;
		// There are num_neurons number of neurons in the core.
		// For flexibility, we could have a single neuron config for the whole core
		// or different config for each neuron.
		// Currently, we only support single configuration for all neurons.
		required LIFNeuronConfig neuron = 2;		
	}

	// There are num_neurons connections for each neuron
	repeated NeuronConfig neurons = 7;	   
}   
  
message BitstreamConfig {
	// Bitstream is application specific and contains
	// mapping of resistance crossbar arrays (weights) onto 
	// physical cores.

	// The number of cores used by the application
	required int32 num_used_cores = 1;

	// Bitstream of each core used by application
	repeated BitstreamCoreConfig bitstreams = 2;
}
