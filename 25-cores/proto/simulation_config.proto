// ------------------------------------------------------------------
// NeuroSim (c) 2018 Institute of High Performance Computing (IHPC)
// Agency for Science, Technology and Research (A*STAR)
// ------------------------------------------------------------------

syntax = "proto2";

package neurosim;

message SimulationConfig {
	// Number of total seconds to run for simulation
	required float num_total_secs = 1 [default = 1.0];
	  
	// The frequency in core processing, the unit is hertz
	required int32 frequency_in_core = 2 [default = 200];
	  
	// The frequency in communication network processing, the unit is hertz
	// Normally greater than the frequency in core processing
	required int32 frequency_in_comm = 3 [default = 20000];
	  
	// One filename of spike source or one directory including all spike sources
	required string spike_sources = 4;
	
	// Filename of bitstream to load
	// Bitstream file contains a header with target hardware information,
	// weight information for each core on the hardware, and the connections
	// between cores.
	required string bitstream_filename = 5;
	
	// Filename of chip configuration to run on
	required string chip_config_filename = 6 [default = "chip_config.json"];
	
	// The global Seed for random number generation
	required int32 generator_seed = 7 [default = 25];
	  
	// The output diagnosis to the screen
	repeated int32 verboses = 8;
	  
	// The ouput cores which would wtrite out spikes to the sink file
	repeated int32 external_core_ids = 9;
	
	// The last output core id which would fill up the range 
	// after last item in the list of external_core_ids
	optional int32 external_core_end_id = 13;
	  
	enum ComputingType {
	  	//Computing in a sequence
	   	SERIAL_COMPUTING = 0;
	   	//Computing in parallel
	    PARALLEL_COMPUTING = 1;
	    //GPU computing
	    GPU0_COMPUTING = 2;
	};
	  
	//The computing type which indicate computation is in a sequence or parallel
	required ComputingType computing_type = 10 [default = SERIAL_COMPUTING]; 
	  
	enum NetworkType {
	  	// Ideal Network to transmit spikes, no any latency
	  	IDEAL_NETWORK = 0;
	  	// Mesh Network to transmit spikes, latency exits
	  	MESH_NETWORK = 1;
	};
	  
	required NetworkType network_type = 11 [default = IDEAL_NETWORK];
	  
	enum ComputingMode {
		// Simulate SNN
		SNN = 0;
		// Simulate ANN for debuging purpose
		// Under this mode, the inputs are float numbers instead of spikes,
		// The float weights are stored in the digital crossbar.
		// The neurons would perform relu activation.
		ANN = 1;
	};
		
	// The type of computing mode which is used to debug network structure.
	optional ComputingMode computing_mode = 12 [default = SNN];
	
	// To dump traffic flow information from all the routers
	optional bool verbose_comm = 14 [default = false];
	
	//filter spike source file with the extension name
	optional string source_filter = 16 [default = ".csv"];
    
    enum OutputMode {
        // Output sink filenames on the console
        filenames = 0;
        // Output progress bar on the console
        bar = 1;
    }
    // To specify to output progress bar or filenames
    optional OutputMode output_opt = 17 [default = filenames];
}


